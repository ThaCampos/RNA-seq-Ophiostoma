packages_to_use = c("S4Vectors", "colorspace", "stringi", "locfit",
"dbplyr", "WGCNA", "clusterProfiler",
"tidyverse", "KEGGprofile", "DESeq2")
for (i in packages_to_use) {
if (i %in% rownames(installed.packages())) {
library(i, character.only = T)
} else {
BiocManager::install(i)
install.packages(i, dependencies = T)
library(i, character.only = T)
}
}
acronyms = c("O. ulmi Q412T-O",
"O. nouvelle-subsp. novo-ulmi H327-O",
"O. novo-ulmi subsp. Lien américain 1 DDS100",
"O. novo-ulmi subsp. Lignée américaine 2 DDS 154",
"O. himal-ulmi HP30",
"O. quercus AU5-1",
"O. novo-ulmi subsp. mutant novo-ulmi delta Ogf1 13-15",
"H2O")
names(acronyms) <- LETTERS[1:8]
input_dir = paste0("input/Ulmu_pop_up_down_exp_ANNOT_GO_KEGG/")
files = sapply(LETTERS[1:8], function(x){
paste0(input_dir, x, "/", x, "_", c("down", "up"),
"_merge_NASTA_PROT_ID_sort.txt")
}) %>% as.data.frame()
down_regulated <- lapply(LETTERS[1:8], function(x){
read.delim(files[1, x])
})
up_regulated <- lapply(LETTERS[1:8], function(x){
read.delim(files[2, x])
})
names(down_regulated) <- names(up_regulated) <- LETTERS[1:8]
degs = c()
for (i in LETTERS[1:8]) {
degs = c(degs, down_regulated[[i]]$Gene_ID, up_regulated[[i]]$Gene_ID) %>%
unique
}
expression = lapply(LETTERS[1:8], function(x){
read.delim(paste0(input_dir, x, "/", x, "_pop_bom_nome_matrix.txt"))
})
names(expression) <- LETTERS[1:8]
rm(expression_df)
for (i in LETTERS[1:8]) {
if (!exists("expression_df")) {
expression_df = expression[[i]]
rownames(expression_df) <- expression_df[, "Gene_ID"]
} else {
expression_df <- merge(expression_df,
expression[[i]],
by = c("Gene_ID", "subject_id")
)
}
}
rownames(expression_df) <- expression_df$Gene_ID
design <- data.frame(design = names(expression_df)[3:ncol(expression_df)]) %>%
separate(col = design, sep = "_",
into = c("treatment", "time", "replicate"))
design$treatment <- factor(design$treatment, levels = c("H", LETTERS[1:7]))
design$time <- factor(design$time, levels = c("T1", "T2"))
dds <- DESeqDataSetFromMatrix(countData = expression_df[, -c(1, 2)],
colData = design, design = treatment ~ time)
dds <- estimateSizeFactors(dds)
normalized_counts <- counts(dds, normalized = T)
day3 <- grep("_T1_", colnames(normalized_counts), value = T)
degs_norm <- normalized_counts[degs,day3] %>% t %>% as.data.frame
options(stringsAsFactors = FALSE)
# Choose a set of soft-thresholding powers
powers <- c(c(1:10), seq(from = 12, to = 20, by = 2))
# Call the network topology analysis function
sft <- pickSoftThreshold(degs_norm, powerVector = powers, verbose = 5)
# Plot the results:
sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 <- 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[, 1], -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
xlab = "Soft Threshold (power)",
ylab = "Scale Free Topology Model Fit,signed R^2", type = "n",
main = paste("Scale independence"))
text(sft$fitIndices[, 1], -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
labels = powers, cex = cex1, col = "red");
# this line corresponds to using an R^2 cut-off of h
abline(h = 0.90,col = "red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[, 1], sft$fitIndices[, 5],
xlab = "Soft Threshold (power)",
ylab = "Mean Connectivity", type = "n",
main = paste("Mean connectivity"))
text(sft$fitIndices[, 1], sft$fitIndices[, 5],
labels = powers, cex = cex1, col = "red")
for (i in 1:nrow(sft$fitIndices)) {
if (-sign(sft$fitIndices[i, 3]) * sft$fitIndices[i, 2] > 0.9) {
power = sft$fitIndices$Power[i]
break
} else {
next
}
}
for(i in 1:ncol(degs_norm)){
degs_norm[,i] <- as.numeric(degs_norm[,i])
}
cor <- WGCNA::cor
net <- blockwiseModules(degs_norm, power = power,
TOMType = "unsigned",
numericLabels = TRUE, verbose = 3)
power
for (i in 1:nrow(sft$fitIndices)) {
if (-sign(sft$fitIndices[i, 3]) * sft$fitIndices[i, 2] > 0.9) {
power_ = sft$fitIndices$Power[i]
break
} else {
next
}
}
for(i in 1:ncol(degs_norm)){
degs_norm[,i] <- as.numeric(degs_norm[,i])
}
cor <- WGCNA::cor
net <- blockwiseModules(degs_norm, power = power_,
TOMType = "unsigned",
numericLabels = TRUE, verbose = 3)
for (i in 1:nrow(sft$fitIndices)) {
if (-sign(sft$fitIndices[i, 3]) * sft$fitIndices[i, 2] > 0.9) {
power_ = sft$fitIndices$Power[i]
break
} else {
next
}
}
for (i in 1:nrow(sft$fitIndices)) {
if (-sign(sft$fitIndices[i, 3]) * sft$fitIndices[i, 2] > 0.9) {
power_ = sft$fitIndices$Power[i]
break
} else {
next
}
}
1:nrow(sft$fitIndices)
-sign(sft$fitIndices[i, 3]) * sft$fitIndices[i, 2] > 0.9
sft$fitIndices$Power[i]
for (i in 1:nrow(sft$fitIndices)) {
print (-sign(sft$fitIndices[i, 3]) * sft$fitIndices[i, 2] > 0.9)}
for (i in 1:nrow(sft$fitIndices)) {
print (-sign(sft$fitIndices[i, 3]) * sft$fitIndices[i, 2])}
for (i in 1:nrow(sft$fitIndices)) {
if (-sign(sft$fitIndices[i, 3]) * sft$fitIndices[i, 2] > 0.75) {
power_ = sft$fitIndices$Power[i]
break
} else {
next
}
}
for(i in 1:ncol(degs_norm)){
degs_norm[,i] <- as.numeric(degs_norm[,i])
}
cor <- WGCNA::cor
net <- blockwiseModules(degs_norm, power = power_,
TOMType = "unsigned",
numericLabels = TRUE, verbose = 3)
# open a graphics window
sizeGrWindow(12, 9)
# Convert labels to colors for plotting
moduleColors<- labels2colors(net$colors)
# Plot the dendrogram and the module colors underneath
plotDendroAndColors(net$dendrograms[[1]], moduleColors[net$blockGenes[[1]]],
"Module colors",
dendroLabels = FALSE, hang = 0.03,
addGuide = F)
for (i in 1:nrow(sft$fitIndices)) {
if (-sign(sft$fitIndices[i, 3]) * sft$fitIndices[i, 2] > 0.85) {
power_ = sft$fitIndices$Power[i]
break
} else {
next
}
}
for(i in 1:ncol(degs_norm)){
degs_norm[,i] <- as.numeric(degs_norm[,i])
}
cor <- WGCNA::cor
net <- blockwiseModules(degs_norm, power = power_,
TOMType = "unsigned",
numericLabels = TRUE, verbose = 3)
# open a graphics window
sizeGrWindow(12, 9)
# Convert labels to colors for plotting
moduleColors<- labels2colors(net$colors)
# Plot the dendrogram and the module colors underneath
plotDendroAndColors(net$dendrograms[[1]], moduleColors[net$blockGenes[[1]]],
"Module colors",
dendroLabels = FALSE, hang = 0.03,
addGuide = F)
moduleLabels <- net$colors
MEs <- net$MEs;
geneTree <- net$dendrograms[[1]];
save(MEs, moduleLabels, moduleColors, geneTree,
file = "effectors_DEGs-networkConstruction-auto.RData")
#blockwise function already merges, so no need to calculate it separetely
# Calculate eigengenes
MEList <- moduleEigengenes(degs_norm, colors = moduleColors)
MEs <- MEList$eigengenes
# Calculate dissimilarity of module eigengenes
MEDiss <- 1 - cor(MEs);
# Cluster module eigengenes
METree <- hclust(as.dist(MEDiss), method = "average");
# Plot the result
sizeGrWindow(7, 6)
plot(METree, main = "Clustering of module eigengenes",
xlab = "", sub = "")
rownames(dds)
setRepositories()
BiocManager::install("MeSH.Ptr.eg.db")
for (i in LETTERS[1:8]) {
if (!exists("heatmap_df")) {
heatmap_df = data.frame(rbind(up_regulated[[i]][, c(1, 2, 4)],
down_regulated[[i]][, c(1, 2, 4)]))
rownames(heatmap_df) <- heatmap_df[, "Gene_ID"]
} else {
tmp <- data.frame(rbind(up_regulated[[i]][, c(1, 2, 4)],
down_regulated[[i]][, c(1, 2, 4)]))
heatmap_df <- merge(heatmap_df, tmp,
by = c("Gene_ID", "subject_id")
)
}
}
data.frame(rbind(up_regulated[["A"]][, 2],
down_regulated[["A"]][, 2]))
rbind(up_regulated[["A"]][, 2],
down_regulated[["A"]][, 2])
up_regulated[["A"]][, 2]
down_regulated[["A"]][, 2]
c(up_regulated[["A"]][, 2],
down_regulated[["A"]][, 2])
c(up_regulated[["A"]][, 2],
down_regulated[["A"]][, 2]) %>% length()
c(up_regulated[["A"]][, 2],
down_regulated[["A"]][, 2]) %>% unique %>%length()
rbind(up_regulated[["A"]][, 2],
down_regulated[["A"]][, 2])
rbind(up_regulated[["A"]]$Gene_ID,
down_regulated[["A"]]$Gene_ID)
cbind(up_regulated[["A"]]$Gene_ID,
down_regulated[["A"]]$Gene_ID)
cbind(up_regulated[["A"]][, c(1, 2, 4)],
down_regulated[["A"]][, c(1, 2, 4)])
rbind(up_regulated[["A"]][, c(1, 2, 4)],
down_regulated[["A"]][, c(1, 2, 4)])
rbind(up_regulated[["A"]][, c(1, 2, 4)],
down_regulated[["A"]][, c(1, 2, 4)]) %>% unique()
rbind(up_regulated[["A"]][, c(1, 2, 4)],
down_regulated[["A"]][, c(1, 2, 4)])
rbind(up_regulated[["A"]][, c(1, 2, 4)],
down_regulated[["A"]][, c(1, 2, 4)]) %>% duplicated()
rm(heatmap_df)
for (i in LETTERS[1:8]) {
if (!exists("heatmap_df")) {
heatmap_df = data.frame(rbind(up_regulated[[i]][, c(1, 2, 4)],
down_regulated[[i]][, c(1, 2, 4)])) %>%
unique()
rownames(heatmap_df) <- heatmap_df[, "Gene_ID"]
} else {
tmp <- data.frame(rbind(up_regulated[[i]][, c(1, 2, 4)],
down_regulated[[i]][, c(1, 2, 4)]))  %>%
unique()
rownames(tmp) <- tmp[, "Gene_ID"]
heatmap_df <- merge(heatmap_df, tmp,
by = c("Gene_ID", "subject_id")
)
}
}
rm(heatmap_df)
for (i in LETTERS[1:8]) {
if (!exists("heatmap_df")) {
heatmap_df = data.frame(rbind(up_regulated[[i]][, c(1, 2, 4)],
down_regulated[[i]][, c(1, 2, 4)])) %>%
unique()
rownames(heatmap_df) <- heatmap_df[, "Gene_ID"]
colnames(heatmap_df)[3] <- i
} else {
tmp <- data.frame(rbind(up_regulated[[i]][, c(1, 2, 4)],
down_regulated[[i]][, c(1, 2, 4)]))  %>%
unique()
rownames(tmp) <- tmp[, "Gene_ID"]
colnames(tmp)[3] <- i
heatmap_df <- merge(heatmap_df, tmp,
by = c("Gene_ID", "subject_id")
)
}
}
rm(heatmap_df)
heatmap_df = data.frame(rbind(up_regulated[[i]][, c(1, 2, 4)],
down_regulated[[i]][, c(1, 2, 4)])) %>%
unique()
rownames(heatmap_df) <- heatmap_df[, "Gene_ID"]
colnames(heatmap_df)[3] <- i
View(heatmap_df)
rm(heatmap_df)
rm(heatmap_df)
for (i in LETTERS[1:8]) {
if (!exists("heatmap_df")) {
heatmap_df = data.frame(rbind(up_regulated[[i]][, c(1, 2, 4)],
down_regulated[[i]][, c(1, 2, 4)])) %>%
unique()
rownames(heatmap_df) <- heatmap_df[, "Gene_ID"]
colnames(heatmap_df)[3] <- i
} else {
tmp <- data.frame(rbind(up_regulated[[i]][, c(1, 2, 4)],
down_regulated[[i]][, c(1, 2, 4)]))  %>%
unique()
rownames(tmp) <- tmp[, "Gene_ID"]
colnames(tmp)[3] <- i
heatmap_df <- merge(heatmap_df, tmp,
by = c("Gene_ID", "subject_id"), all = T
)
}
}
View(heatmap_df)
BiocManager::install("MeSH.Ptr.eg.db")
library(MeSH.Ptr.eg.db)
MeSH.Ptr.eg.db$show
MeSH.Ptr.eg.db$show()
?MeSH.Ptr.eg.db
columns(MeSH.Ptr.eg.db)
MeSH.Ptr.eg.db
dbconn(MeSH.Ptr.eg.db)
dbfile(MeSH.Ptr.eg.db)
dbschema(MeSH.Ptr.eg.db)
keytypes(MeSH.Ptr.eg.db)
head(keys(MeSH.Ptr.eg.db, keytype=kts[2]))
head(keys(MeSH.Ptr.eg.db, keytype=keytypes(MeSH.Ptr.eg.db)[2]))
head(keys(MeSH.Ptr.eg.db, keytype=keytypes(MeSH.Ptr.eg.db)[1]))
head(keys(MeSH.Ptr.eg.db, keytype=keytypes(MeSH.Ptr.eg.db)[3]))
head(keys(MeSH.Ptr.eg.db, keytype=keytypes(MeSH.Ptr.eg.db)[4]))
head(keys(MeSH.Ptr.eg.db, keytype=keytypes(MeSH.Ptr.eg.db)[5]))
tail(keys(MeSH.Ptr.eg.db, keytype=keytypes(MeSH.Ptr.eg.db)[1]))
net$colors
sets <- data.frame(set = unname(net$colors), Gene_ID = names(net$colors))
sets
heatmap_df <- merge(heatmap_df, sets, by = "Gene_ID")
View(heatmap_df)
net$dendrograms
MEList
head(MEList$validColors)
head(sets)
heatmap_df$set <- factor(heatmap_df$set, levels = c(2, 0, 1))
pivot_longer(heatmap_df, cols = -c(Gene_ID, suject_id, sets),
names_to = "condition", values_to = "LogFC")
pivot_longer(heatmap_df, cols = -c(Gene_ID, subject_id, sets),
names_to = "condition", values_to = "LogFC")
for(i in 1:ncol(heatmap_df)) {print(class(heatmap_df[, i]))}
pivot_longer(heatmap_df[, -1], cols = -c(subject_id, sets),
names_to = "condition", values_to = "LogFC")
heatmap_df[, -1]
pivot_longer(heatmap_df[, -1], cols = -c(subject_id, sets),
names_to = "condition", values_to = "LogFC")
pivot_longer(heatmap_df[, -1], cols = c(A, B, C, D, E, F, G, H),
names_to = "condition", values_to = "LogFC")
heatmap_df$subject_id <- factor(heatmap_df$subject_id, levels = heatmap_df$subject_id[order(heatmap_df$set)])
heatmap_df$subject_id[order(heatmap_df$set)]
heatmap_df$Gene_ID <- factor(heatmap_df$subject_id, levels = heatmap_df$Gene_ID[order(heatmap_df$set)])
pivot_longer(heatmap_df[, -1], cols = c(A, B, C, D, E, F, G, H),
names_to = "condition", values_to = "LogFC") %>%
ggplot(aes(x = condition, y = subject_id, color = LogFC))
pivot_longer(heatmap_df[, -1], cols = c(A, B, C, D, E, F, G, H),
names_to = "condition", values_to = "LogFC") %>%
ggplot(aes(x = condition, y = subject_id, color = LogFC)) +
geom_tile() + scale_color_gradient2(high = "red", low = "blue", mid = "white", na.value = "white")
theme_set(theme_bw())
pivot_longer(heatmap_df[, -1], cols = c(A, B, C, D, E, F, G, H),
names_to = "condition", values_to = "LogFC") %>%
ggplot(aes(x = condition, y = subject_id, color = LogFC)) +
geom_tile() + scale_color_gradient2(high = "red", low = "blue", mid = "white", na.value = "white") +
theme(axis.text.y = element_blank())
pivot_longer(heatmap_df[, -1], cols = c(A, B, C, D, E, F, G, H),
names_to = "condition", values_to = "LogFC") %>%
ggplot(aes(y = condition, x = subject_id, color = LogFC)) +
geom_tile() + scale_color_gradient2(high = "red", low = "blue", mid = "white", na.value = "white") +
theme(axis.text.x = element_blank())
theme_set(theme_bw())
pivot_longer(heatmap_df[, -1], cols = c(A, B, C, D, E, F, G, H),
names_to = "condition", values_to = "LogFC") %>%
ggplot(aes(y = condition, x = subject_id, color = LogFC)) +
geom_tile() + scale_color_gradient2(high = "red", low = "blue", mid = "white", na.value = "white") +
theme(axis.text.x = element_blank())
pivot_longer(heatmap_df[, -1], cols = c(A, B, C, D, E, F, G, H),
names_to = "condition", values_to = "LogFC") %>%
ggplot(aes(y = condition, x = subject_id, color = LogFC)) +
geom_tile() + scale_color_gradient2(high = "red", low = "blue",
mid = "white", na.value = "white", midpoint = 0,
name = "Fold change") +
theme(axis.text.x = element_blank())
pivot_longer(heatmap_df[, -1], cols = c(A, B, C, D, E, F, G, H),
names_to = "condition", values_to = "LogFC") %>%
ggplot(aes(y = condition, x = subject_id, color = LogFC)) +
geom_tile() + scale_color_gradient2(high = "red", low = "blue",
mid = "white", midpoint = 0,
name = "Fold change") +
theme(axis.text.x = element_blank())
replace_na(heatmap_df, replace = 0)
?replace_na
list(rep(0, 8))
list(0, 0,0,0,0,0,0,0,)
list(0, 0,0,0,0,0,0,0,0)
rep(0, 8) %>% list
rep(0, 8) %>% as.list
replace = rep(0, 8) %>% as.list
names(replace) <- LETTERS[1:8]
replace_na(heatmap_df, replace = replace)
rm(heatmap_df)
for (i in LETTERS[1:8]) {
if (!exists("heatmap_df")) {
heatmap_df = data.frame(rbind(up_regulated[[i]][, c(1, 2, 4)],
down_regulated[[i]][, c(1, 2, 4)])) %>%
unique()
rownames(heatmap_df) <- heatmap_df[, "Gene_ID"]
colnames(heatmap_df)[3] <- i
} else {
tmp <- data.frame(rbind(up_regulated[[i]][, c(1, 2, 4)],
down_regulated[[i]][, c(1, 2, 4)]))  %>%
unique()
rownames(tmp) <- tmp[, "Gene_ID"]
colnames(tmp)[3] <- i
heatmap_df <- merge(heatmap_df, tmp,
by = c("Gene_ID", "subject_id"), all = T
)
}
}
sets <- data.frame(set = unname(net$colors), Gene_ID = names(net$colors))
heatmap_df <- merge(heatmap_df, sets, by = "Gene_ID")
heatmap_df$set <- factor(heatmap_df$set, levels = c(2, 0, 1))
heatmap_df$Gene_ID <- factor(heatmap_df$subject_id, levels = heatmap_df$Gene_ID[order(heatmap_df$set)])
replace_na()
heatmap_df
sets
head(set)
head(sets)
rm(heatmap_df)
for (i in LETTERS[1:8]) {
if (!exists("heatmap_df")) {
heatmap_df = data.frame(rbind(up_regulated[[i]][, c(1, 2, 4)],
down_regulated[[i]][, c(1, 2, 4)])) %>%
unique()
rownames(heatmap_df) <- heatmap_df[, "Gene_ID"]
colnames(heatmap_df)[3] <- i
} else {
tmp <- data.frame(rbind(up_regulated[[i]][, c(1, 2, 4)],
down_regulated[[i]][, c(1, 2, 4)]))  %>%
unique()
rownames(tmp) <- tmp[, "Gene_ID"]
colnames(tmp)[3] <- i
heatmap_df <- merge(heatmap_df, tmp,
by = c("Gene_ID", "subject_id"), all = T
)
}
}
sets <- data.frame(set = unname(net$colors), Gene_ID = names(net$colors))
head(heatmap_df)
merge(heatmap_df, sets, by = "Gene_ID")
heatmap_df$set <- factor(heatmap_df$set, levels = c(2, 0, 1))
heatmap_df <- merge(heatmap_df, sets, by = "Gene_ID")
heatmap_df$set <- factor(heatmap_df$set, levels = c(2, 0, 1))
heatmap_df$Gene_ID <- factor(heatmap_df$Gene_ID, levels = heatmap_df$Gene_ID[order(heatmap_df$set)])
heatmap_df
replace = rep(0, 8) %>% as.list
names(replace) <- LETTERS[1:8]
replace_na(heatmap_df, replace = replace)[-2]
replace = rep(0, 8) %>% as.list
names(replace) <- LETTERS[1:8]
theme_set(theme_bw())
replace_na(heatmap_df, replace = replace)[-2] %>%
pivot_longer(cols = c(A, B, C, D, E, F, G, H),
names_to = "condition", values_to = "LogFC") %>%
ggplot(aes(y = condition, x = subject_id, color = LogFC)) +
geom_tile() + scale_color_gradient2(high = "red", low = "blue",
mid = "white", midpoint = 0,
name = "Fold change") +
theme(axis.text.x = element_blank())
replace_na(heatmap_df, replace = replace)[-2] %>%
pivot_longer(cols = c(A, B, C, D, E, F, G, H),
names_to = "condition", values_to = "LogFC") %>%
ggplot(aes(y = condition, x = Gene_ID, color = LogFC)) +
geom_tile() + scale_color_gradient2(high = "red", low = "blue",
mid = "white", midpoint = 0,
name = "Fold change") +
theme(axis.text.x = element_blank())
replace = rep(0, 8) %>% as.list
names(replace) <- LETTERS[1:8]
theme_set(theme_bw())
replace_na(heatmap_df, replace = replace)[-2] %>%
pivot_longer(cols = c(A, B, C, D, E, F, G, H),
names_to = "condition", values_to = "LogFC") %>%
ggplot(aes(y = condition, x = Gene_ID, fill = LogFC)) +
geom_tile() + scale_fill_gradient2(high = "red", low = "blue",
mid = "white", midpoint = 0,
name = "Fold change") +
theme(axis.text.x = element_blank())
net$dendrograms %>% class
net$dendrograms
net$dendrograms[[1]]
heatmap_df$Gene_ID <- factor(heatmap_df$Gene_ID, levels = heatmap_df$Gene_ID[net$dendrograms[[1]]$order])
replace = rep(0, 8) %>% as.list
names(replace) <- LETTERS[1:8]
theme_set(theme_bw())
replace_na(heatmap_df, replace = replace)[-2] %>%
pivot_longer(cols = c(A, B, C, D, E, F, G, H),
names_to = "condition", values_to = "LogFC") %>%
ggplot(aes(y = condition, x = Gene_ID, fill = LogFC)) +
geom_tile() + scale_fill_gradient2(high = "red", low = "blue",
mid = "white", midpoint = 0,
name = "Fold change") +
theme(axis.text.x = element_blank())
